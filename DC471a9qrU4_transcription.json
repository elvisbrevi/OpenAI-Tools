[
    {
        "id": 0,
        "seek": 0,
        "start": 0.0,
        "end": 5.960000038146973,
        "text": " ArrayMap, create a new array by calling a function on every element in a different array.",
        "tokens": [
            50364,
            1587,
            3458,
            44,
            569,
            11,
            1884,
            257,
            777,
            10225,
            538,
            5141,
            257,
            2445,
            322,
            633,
            4478,
            294,
            257,
            819,
            10225,
            13,
            50662
        ],
        "temperature": 0.0,
        "avg_logprob": -0.20325690507888794,
        "compression_ratio": 1.9328358173370361,
        "no_speech_prob": 0.17759612202644348
    },
    {
        "id": 1,
        "seek": 0,
        "start": 5.960000038146973,
        "end": 7.440000057220459,
        "text": " Imagine we have an array of squares.",
        "tokens": [
            50662,
            11739,
            321,
            362,
            364,
            10225,
            295,
            19368,
            13,
            50736
        ],
        "temperature": 0.0,
        "avg_logprob": -0.20325690507888794,
        "compression_ratio": 1.9328358173370361,
        "no_speech_prob": 0.17759612202644348
    },
    {
        "id": 2,
        "seek": 0,
        "start": 7.440000057220459,
        "end": 11.479999542236328,
        "text": " We can call a function on every single one of those squares using map to convert it to",
        "tokens": [
            50736,
            492,
            393,
            818,
            257,
            2445,
            322,
            633,
            2167,
            472,
            295,
            729,
            19368,
            1228,
            4471,
            281,
            7620,
            309,
            281,
            50938
        ],
        "temperature": 0.0,
        "avg_logprob": -0.20325690507888794,
        "compression_ratio": 1.9328358173370361,
        "no_speech_prob": 0.17759612202644348
    },
    {
        "id": 3,
        "seek": 0,
        "start": 11.479999542236328,
        "end": 13.319999694824219,
        "text": " a new array of circles.",
        "tokens": [
            50938,
            257,
            777,
            10225,
            295,
            13040,
            13,
            51030
        ],
        "temperature": 0.0,
        "avg_logprob": -0.20325690507888794,
        "compression_ratio": 1.9328358173370361,
        "no_speech_prob": 0.17759612202644348
    },
    {
        "id": 4,
        "seek": 0,
        "start": 13.319999694824219,
        "end": 17.760000228881836,
        "text": " In other words, it's just a loop, where the goal of that loop is to create a new array.",
        "tokens": [
            51030,
            682,
            661,
            2283,
            11,
            309,
            311,
            445,
            257,
            6367,
            11,
            689,
            264,
            3387,
            295,
            300,
            6367,
            307,
            281,
            1884,
            257,
            777,
            10225,
            13,
            51252
        ],
        "temperature": 0.0,
        "avg_logprob": -0.20325690507888794,
        "compression_ratio": 1.9328358173370361,
        "no_speech_prob": 0.17759612202644348
    },
    {
        "id": 5,
        "seek": 0,
        "start": 17.760000228881836,
        "end": 21.639999389648438,
        "text": " In our code, let's start with an array of objects that contains some user data.",
        "tokens": [
            51252,
            682,
            527,
            3089,
            11,
            718,
            311,
            722,
            365,
            364,
            10225,
            295,
            6565,
            300,
            8306,
            512,
            4195,
            1412,
            13,
            51446
        ],
        "temperature": 0.0,
        "avg_logprob": -0.20325690507888794,
        "compression_ratio": 1.9328358173370361,
        "no_speech_prob": 0.17759612202644348
    },
    {
        "id": 6,
        "seek": 0,
        "start": 21.639999389648438,
        "end": 25.440000534057617,
        "text": " Our goal is to take this array of objects and convert it to an array of strings that",
        "tokens": [
            51446,
            2621,
            3387,
            307,
            281,
            747,
            341,
            10225,
            295,
            6565,
            293,
            7620,
            309,
            281,
            364,
            10225,
            295,
            13985,
            300,
            51636
        ],
        "temperature": 0.0,
        "avg_logprob": -0.20325690507888794,
        "compression_ratio": 1.9328358173370361,
        "no_speech_prob": 0.17759612202644348
    },
    {
        "id": 7,
        "seek": 0,
        "start": 25.440000534057617,
        "end": 27.1200008392334,
        "text": " only contain the usernames.",
        "tokens": [
            51636,
            787,
            5304,
            264,
            505,
            1248,
            1632,
            13,
            51720
        ],
        "temperature": 0.0,
        "avg_logprob": -0.20325690507888794,
        "compression_ratio": 1.9328358173370361,
        "no_speech_prob": 0.17759612202644348
    },
    {
        "id": 8,
        "seek": 2712,
        "start": 27.1200008392334,
        "end": 31.219999313354492,
        "text": " We could do this imperatively by creating a new empty array, then use a for loop to",
        "tokens": [
            50364,
            492,
            727,
            360,
            341,
            10100,
            19020,
            538,
            4084,
            257,
            777,
            6707,
            10225,
            11,
            550,
            764,
            257,
            337,
            6367,
            281,
            50569
        ],
        "temperature": 0.0,
        "avg_logprob": -0.23996327817440033,
        "compression_ratio": 1.8321168422698975,
        "no_speech_prob": 0.2419128715991974
    },
    {
        "id": 9,
        "seek": 2712,
        "start": 31.219999313354492,
        "end": 33.91999816894531,
        "text": " push each individual username to the new array.",
        "tokens": [
            50569,
            2944,
            1184,
            2609,
            30351,
            281,
            264,
            777,
            10225,
            13,
            50704
        ],
        "temperature": 0.0,
        "avg_logprob": -0.23996327817440033,
        "compression_ratio": 1.8321168422698975,
        "no_speech_prob": 0.2419128715991974
    },
    {
        "id": 10,
        "seek": 2712,
        "start": 33.91999816894531,
        "end": 36.560001373291016,
        "text": " Notice how we're using statements to change the app's state.",
        "tokens": [
            50704,
            13428,
            577,
            321,
            434,
            1228,
            12363,
            281,
            1319,
            264,
            724,
            311,
            1785,
            13,
            50836
        ],
        "temperature": 0.0,
        "avg_logprob": -0.23996327817440033,
        "compression_ratio": 1.8321168422698975,
        "no_speech_prob": 0.2419128715991974
    },
    {
        "id": 11,
        "seek": 2712,
        "start": 36.560001373291016,
        "end": 38.439998626708984,
        "text": " This is known as imperative programming.",
        "tokens": [
            50836,
            639,
            307,
            2570,
            382,
            32490,
            9410,
            13,
            50930
        ],
        "temperature": 0.0,
        "avg_logprob": -0.23996327817440033,
        "compression_ratio": 1.8321168422698975,
        "no_speech_prob": 0.2419128715991974
    },
    {
        "id": 12,
        "seek": 2712,
        "start": 38.439998626708984,
        "end": 42.900001525878906,
        "text": " Map, on the other hand, is declarative and describes how to create this new array using",
        "tokens": [
            50930,
            22053,
            11,
            322,
            264,
            661,
            1011,
            11,
            307,
            16694,
            1166,
            293,
            15626,
            577,
            281,
            1884,
            341,
            777,
            10225,
            1228,
            51153
        ],
        "temperature": 0.0,
        "avg_logprob": -0.23996327817440033,
        "compression_ratio": 1.8321168422698975,
        "no_speech_prob": 0.2419128715991974
    },
    {
        "id": 13,
        "seek": 2712,
        "start": 42.900001525878906,
        "end": 44.15999984741211,
        "text": " a function.",
        "tokens": [
            51153,
            257,
            2445,
            13,
            51216
        ],
        "temperature": 0.0,
        "avg_logprob": -0.23996327817440033,
        "compression_ratio": 1.8321168422698975,
        "no_speech_prob": 0.2419128715991974
    },
    {
        "id": 14,
        "seek": 2712,
        "start": 44.15999984741211,
        "end": 48.0,
        "text": " The new array is equal to the original array mapped to a function.",
        "tokens": [
            51216,
            440,
            777,
            10225,
            307,
            2681,
            281,
            264,
            3380,
            10225,
            33318,
            281,
            257,
            2445,
            13,
            51408
        ],
        "temperature": 0.0,
        "avg_logprob": -0.23996327817440033,
        "compression_ratio": 1.8321168422698975,
        "no_speech_prob": 0.2419128715991974
    },
    {
        "id": 15,
        "seek": 2712,
        "start": 48.0,
        "end": 52.599998474121094,
        "text": " The function is passed as an argument to map, and it's called on every element in the original",
        "tokens": [
            51408,
            440,
            2445,
            307,
            4678,
            382,
            364,
            6770,
            281,
            4471,
            11,
            293,
            309,
            311,
            1219,
            322,
            633,
            4478,
            294,
            264,
            3380,
            51638
        ],
        "temperature": 0.0,
        "avg_logprob": -0.23996327817440033,
        "compression_ratio": 1.8321168422698975,
        "no_speech_prob": 0.2419128715991974
    },
    {
        "id": 16,
        "seek": 2712,
        "start": 52.599998474121094,
        "end": 53.599998474121094,
        "text": " array.",
        "tokens": [
            51638,
            10225,
            13,
            51688
        ],
        "temperature": 0.0,
        "avg_logprob": -0.23996327817440033,
        "compression_ratio": 1.8321168422698975,
        "no_speech_prob": 0.2419128715991974
    },
    {
        "id": 17,
        "seek": 5360,
        "start": 53.599998474121094,
        "end": 57.31999969482422,
        "text": " Each function has access to the current element in the loop as well as its index.",
        "tokens": [
            50364,
            6947,
            2445,
            575,
            2105,
            281,
            264,
            2190,
            4478,
            294,
            264,
            6367,
            382,
            731,
            382,
            1080,
            8186,
            13,
            50550
        ],
        "temperature": 0.0,
        "avg_logprob": -0.22295986115932465,
        "compression_ratio": 1.7372881174087524,
        "no_speech_prob": 0.7951681613922119
    },
    {
        "id": 18,
        "seek": 5360,
        "start": 57.31999969482422,
        "end": 61.31999969482422,
        "text": " In the body of the function, your job is to compute a new value and then return it.",
        "tokens": [
            50550,
            682,
            264,
            1772,
            295,
            264,
            2445,
            11,
            428,
            1691,
            307,
            281,
            14722,
            257,
            777,
            2158,
            293,
            550,
            2736,
            309,
            13,
            50750
        ],
        "temperature": 0.0,
        "avg_logprob": -0.22295986115932465,
        "compression_ratio": 1.7372881174087524,
        "no_speech_prob": 0.7951681613922119
    },
    {
        "id": 19,
        "seek": 5360,
        "start": 61.31999969482422,
        "end": 64.5199966430664,
        "text": " And we've now solved the same problem we did with the for loop, but with less code",
        "tokens": [
            50750,
            400,
            321,
            600,
            586,
            13041,
            264,
            912,
            1154,
            321,
            630,
            365,
            264,
            337,
            6367,
            11,
            457,
            365,
            1570,
            3089,
            50910
        ],
        "temperature": 0.0,
        "avg_logprob": -0.22295986115932465,
        "compression_ratio": 1.7372881174087524,
        "no_speech_prob": 0.7951681613922119
    },
    {
        "id": 20,
        "seek": 5360,
        "start": 64.5199966430664,
        "end": 66.5999984741211,
        "text": " and without mutating the internal state.",
        "tokens": [
            50910,
            293,
            1553,
            5839,
            990,
            264,
            6920,
            1785,
            13,
            51014
        ],
        "temperature": 0.0,
        "avg_logprob": -0.22295986115932465,
        "compression_ratio": 1.7372881174087524,
        "no_speech_prob": 0.7951681613922119
    },
    {
        "id": 21,
        "seek": 5360,
        "start": 66.5999984741211,
        "end": 70.87999725341797,
        "text": " If you're a React.js user, you'll often see map used to take some initial data and",
        "tokens": [
            51014,
            759,
            291,
            434,
            257,
            30644,
            13,
            25530,
            4195,
            11,
            291,
            603,
            2049,
            536,
            4471,
            1143,
            281,
            747,
            512,
            5883,
            1412,
            293,
            51228
        ],
        "temperature": 0.0,
        "avg_logprob": -0.22295986115932465,
        "compression_ratio": 1.7372881174087524,
        "no_speech_prob": 0.7951681613922119
    },
    {
        "id": 22,
        "seek": 5360,
        "start": 70.87999725341797,
        "end": 73.91999816894531,
        "text": " then map it to JSX for the actual UI.",
        "tokens": [
            51228,
            550,
            4471,
            309,
            281,
            33063,
            55,
            337,
            264,
            3539,
            15682,
            13,
            51380
        ],
        "temperature": 0.0,
        "avg_logprob": -0.22295986115932465,
        "compression_ratio": 1.7372881174087524,
        "no_speech_prob": 0.7951681613922119
    },
    {
        "id": 23,
        "seek": 5360,
        "start": 73.91999816894531,
        "end": 77.69999694824219,
        "text": " Or maybe you need these usernames to do something asynchronously like fetch additional data",
        "tokens": [
            51380,
            1610,
            1310,
            291,
            643,
            613,
            505,
            1248,
            1632,
            281,
            360,
            746,
            42642,
            5098,
            411,
            23673,
            4497,
            1412,
            51569
        ],
        "temperature": 0.0,
        "avg_logprob": -0.22295986115932465,
        "compression_ratio": 1.7372881174087524,
        "no_speech_prob": 0.7951681613922119
    },
    {
        "id": 24,
        "seek": 5360,
        "start": 77.69999694824219,
        "end": 78.83999633789062,
        "text": " from the database.",
        "tokens": [
            51569,
            490,
            264,
            8149,
            13,
            51626
        ],
        "temperature": 0.0,
        "avg_logprob": -0.22295986115932465,
        "compression_ratio": 1.7372881174087524,
        "no_speech_prob": 0.7951681613922119
    },
    {
        "id": 25,
        "seek": 5360,
        "start": 78.83999633789062,
        "end": 82.73999786376953,
        "text": " You could do that by mapping them all to an array of promises, then running them concurrently",
        "tokens": [
            51626,
            509,
            727,
            360,
            300,
            538,
            18350,
            552,
            439,
            281,
            364,
            10225,
            295,
            16403,
            11,
            550,
            2614,
            552,
            37702,
            356,
            51821
        ],
        "temperature": 0.0,
        "avg_logprob": -0.22295986115932465,
        "compression_ratio": 1.7372881174087524,
        "no_speech_prob": 0.7951681613922119
    },
    {
        "id": 26,
        "seek": 8274,
        "start": 82.77999877929688,
        "end": 84.62000274658203,
        "text": " with promise.all.",
        "tokens": [
            50366,
            365,
            6228,
            13,
            336,
            13,
            50458
        ],
        "temperature": 0.0,
        "avg_logprob": -0.24897463619709015,
        "compression_ratio": 1.4803920984268188,
        "no_speech_prob": 0.4802064895629883
    },
    {
        "id": 27,
        "seek": 8274,
        "start": 84.62000274658203,
        "end": 88.13999938964844,
        "text": " One anti-pattern to be aware of with map is that you should only use it if you plan on",
        "tokens": [
            50458,
            1485,
            6061,
            12,
            79,
            1161,
            77,
            281,
            312,
            3650,
            295,
            365,
            4471,
            307,
            300,
            291,
            820,
            787,
            764,
            309,
            498,
            291,
            1393,
            322,
            50634
        ],
        "temperature": 0.0,
        "avg_logprob": -0.24897463619709015,
        "compression_ratio": 1.4803920984268188,
        "no_speech_prob": 0.4802064895629883
    },
    {
        "id": 28,
        "seek": 8274,
        "start": 88.13999938964844,
        "end": 89.66000366210938,
        "text": " using the new array.",
        "tokens": [
            50634,
            1228,
            264,
            777,
            10225,
            13,
            50710
        ],
        "temperature": 0.0,
        "avg_logprob": -0.24897463619709015,
        "compression_ratio": 1.4803920984268188,
        "no_speech_prob": 0.4802064895629883
    },
    {
        "id": 29,
        "seek": 8274,
        "start": 89.66000366210938,
        "end": 93.86000061035156,
        "text": " If you just need to run a loop, consider for each or a regular for loop instead.",
        "tokens": [
            50710,
            759,
            291,
            445,
            643,
            281,
            1190,
            257,
            6367,
            11,
            1949,
            337,
            1184,
            420,
            257,
            3890,
            337,
            6367,
            2602,
            13,
            50920
        ],
        "temperature": 0.0,
        "avg_logprob": -0.24897463619709015,
        "compression_ratio": 1.4803920984268188,
        "no_speech_prob": 0.4802064895629883
    },
    {
        "id": 30,
        "seek": 8274,
        "start": 93.86000061035156,
        "end": 96.05999755859375,
        "text": " This has been ArrayMap in 100 seconds.",
        "tokens": [
            50920,
            639,
            575,
            668,
            1587,
            3458,
            44,
            569,
            294,
            2319,
            3949,
            13,
            51030
        ],
        "temperature": 0.0,
        "avg_logprob": -0.24897463619709015,
        "compression_ratio": 1.4803920984268188,
        "no_speech_prob": 0.4802064895629883
    },
    {
        "id": 31,
        "seek": 8274,
        "start": 96.05999755859375,
        "end": 98.77999877929688,
        "text": " Thanks for watching, and I will see you in the next one.",
        "tokens": [
            51030,
            2561,
            337,
            1976,
            11,
            293,
            286,
            486,
            536,
            291,
            294,
            264,
            958,
            472,
            13,
            51166
        ],
        "temperature": 0.0,
        "avg_logprob": -0.24897463619709015,
        "compression_ratio": 1.4803920984268188,
        "no_speech_prob": 0.4802064895629883
    }
]