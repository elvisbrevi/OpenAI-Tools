1
00:00:00,000 --> 00:00:05,960
 ArrayMap, create a new array by calling a function on every element in a different array.

2
00:00:05,960 --> 00:00:07,440
 Imagine we have an array of squares.

3
00:00:07,440 --> 00:00:11,479
 We can call a function on every single one of those squares using map to convert it to

4
00:00:11,479 --> 00:00:13,319
 a new array of circles.

5
00:00:13,319 --> 00:00:17,760
 In other words, it's just a loop, where the goal of that loop is to create a new array.

6
00:00:17,760 --> 00:00:21,639
 In our code, let's start with an array of objects that contains some user data.

7
00:00:21,639 --> 00:00:25,440
 Our goal is to take this array of objects and convert it to an array of strings that

8
00:00:25,440 --> 00:00:27,120
 only contain the usernames.

9
00:00:27,120 --> 00:00:31,219
 We could do this imperatively by creating a new empty array, then use a for loop to

10
00:00:31,219 --> 00:00:33,919
 push each individual username to the new array.

11
00:00:33,919 --> 00:00:36,560
 Notice how we're using statements to change the app's state.

12
00:00:36,560 --> 00:00:38,439
 This is known as imperative programming.

13
00:00:38,439 --> 00:00:42,900
 Map, on the other hand, is declarative and describes how to create this new array using

14
00:00:42,900 --> 00:00:44,159
 a function.

15
00:00:44,159 --> 00:00:48,000
 The new array is equal to the original array mapped to a function.

16
00:00:48,000 --> 00:00:52,599
 The function is passed as an argument to map, and it's called on every element in the original

17
00:00:52,599 --> 00:00:53,599
 array.

18
00:00:53,599 --> 00:00:57,319
 Each function has access to the current element in the loop as well as its index.

19
00:00:57,319 --> 00:01:01,319
 In the body of the function, your job is to compute a new value and then return it.

20
00:01:01,319 --> 00:01:04,519
 And we've now solved the same problem we did with the for loop, but with less code

21
00:01:04,519 --> 00:01:06,599
 and without mutating the internal state.

22
00:01:06,599 --> 00:01:10,879
 If you're a React.js user, you'll often see map used to take some initial data and

23
00:01:10,879 --> 00:01:13,919
 then map it to JSX for the actual UI.

24
00:01:13,919 --> 00:01:17,699
 Or maybe you need these usernames to do something asynchronously like fetch additional data

25
00:01:17,699 --> 00:01:18,839
 from the database.

26
00:01:18,839 --> 00:01:22,739
 You could do that by mapping them all to an array of promises, then running them concurrently

27
00:01:22,779 --> 00:01:24,620
 with promise.all.

28
00:01:24,620 --> 00:01:28,139
 One anti-pattern to be aware of with map is that you should only use it if you plan on

29
00:01:28,139 --> 00:01:29,660
 using the new array.

30
00:01:29,660 --> 00:01:33,860
 If you just need to run a loop, consider for each or a regular for loop instead.

31
00:01:33,860 --> 00:01:36,059
 This has been ArrayMap in 100 seconds.

32
00:01:36,059 --> 00:01:38,779
 Thanks for watching, and I will see you in the next one.

